name: Publish
on:
  push:
    branches:
      - 'snz-main'
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch: # Manual trigger

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      GITHUB_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          package_json_file: package.json
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Build Types
        run: pnpm types

      - name: Configure .npmrc for GitHub Package Registry
        run: |
          echo "@streamlinersnz:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "@tinacms:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN}}

      - name: Setup git credentials
        run: |
          git config --global user.email "ci@streamliners.co.nz"
          git config --global user.name "Streamliners CI"

      # Original Changesets step (only used for main/stable branch)
      # - name: Create release pull request or publish packages
      #   uses: changesets/action@v1
      #   id: changesets
      #   with:
      #     version: pnpm run version
      #     publish: pnpm run publish
      #     createGithubReleases: true
      #     setupGitUser: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Stable publish for snz-main
      - name: Publish stable release
        if: github.ref == 'refs/heads/snz-main'
        uses: changesets/action@v1
        id: changesets
        with:
          version: pnpm run version
          publish: pnpm run publish
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Beta/preview publish for all other branches
      - name: Publish beta release
        if: github.ref != 'refs/heads/snz-main'
        run: |
          git checkout ${{ github.sha }}
          pnpm version:snapshot $(echo ${{ github.sha }} | cut -c1-7)
          pnpm run publish:beta
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN}}

      - name: Summary (no publish fallback)
        if: always()
        run: |
          echo "📝 Build completed. Check above for publish status." >> $GITHUB_STEP_SUMMARY

      # Release to @dev channel (only if changesets ran)
      # - name: Release to @dev channel
      #   if: github.ref == 'refs/heads/snz-main' && steps.changesets.outputs.hasChangesets == 'true'
      #   run: |
      #     git checkout ${{ github.sha }}
      #     pnpm version:snapshot $(echo ${{ github.sha }} | cut -c1-7)
      #     pnpm run publish:beta
      #     echo "A release PR has been created: <https://github.com/streamlinersnz/tinacms/pull/${{ steps.changesets.outputs.pullRequestNumber }}>" >> $GITHUB_STEP_SUMMARY
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Has TinaCMS been published
      #   id: newTinaCMSVersion
      #   if: github.ref == 'refs/heads/snz-main' && steps.changesets.outputs.published == 'true'
      #   run: |
      #     newTinaCMSVersion=$(echo $publishedPackages | jq -r '.[] | select(.name == "tinacms") | .version')

      #     if [ -z "$newTinaCMSVersion" ]; then
      #       echo "❌ TinaCMS not published" >> $GITHUB_STEP_SUMMARY
      #     else
      #       echo "🚀 A new version of TinaCMS was released: $newTinaCMSVersion" >> $GITHUB_STEP_SUMMARY
      #     fi

      #     echo "newTinaCMSVersion=$newTinaCMSVersion" >> $GITHUB_OUTPUT
      #   env:
      #     publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}

      # - name: Publish release notes
      #   if: github.ref == 'refs/heads/snz-main' && steps.newTinaCMSVersion.outputs.newTinaCMSVersion != ''
      #   uses: benc-uk/workflow-dispatch@v1
      #   with:
      #     ref: main
      #     workflow: main-generate-release-notes.yml
      #     inputs: |
      #       {
      #         "release_name": "${{ steps.newTinaCMSVersion.outputs.newTinaCMSVersion }}"
      #       }
      #     token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Summary
      #   if: github.ref == 'refs/heads/snz-main' && steps.newTinaCMSVersion.outputs.newTinaCMSVersion == '' && steps.changesets.outputs.hasChangesets == 'false'
      #   run: |
      #     echo "❌ Nothing was published" >> $GITHUB_STEP_SUMMARY
